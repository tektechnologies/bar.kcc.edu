@model IEnumerable<string>
@{
    bool horizontal = ((bool)(ViewContext.RouteData.Values["horizontalLayout"] ?? false));
    string wrapperClasses = horizontal ? "btn-group btn-group-sm btn-group-justified" : null;
}

<div class="@wrapperClasses">
    @Html.ActionLink("Home", "List", "Product",
    new { @class = horizontal ? "btn btn-default btn-sm" :
    "btn btn-block btn-default btn-lg"
    })
    @foreach (var link in Model)
    {
        @Html.RouteLink(link, new {
        controller = "Product",
        action = "List",
        category = link,
        page = 1
        }, new {
        @class = (horizontal ? "btn btn-default btn-sm"
        : "btn btn-block btn-default btn-lg" )
        + (link == ViewBag.SelectedCategory ? " btn-primary" : "")
        })
    }
</div>


@*local variables should be used sparingly because it is the slippery slope into creating views that are hard
to maintain and hard to test, but I sometimes use them in situations like this where I see them as an acceptable cost
of simplifying a view.*@